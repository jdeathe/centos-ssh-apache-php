#!/usr/bin/env bash

# Create lock file
touch /tmp/httpd-bootstrap.lock

TIMER_START="$(
	date +%s.%N
)"

source /etc/httpd-bootstrap.conf

function absolute_path ()
{
	local DIRECTORY_PATH="${1:-}"
	local VALUE

	if [[ -n ${DIRECTORY_PATH} ]]; then
		VALUE="$(
			python -c "import os,sys; print os.path.abspath(sys.argv[1])" \
			"${DIRECTORY_PATH}"
		)"
	fi

	printf -- "%s" "${VALUE}"
}

function add_hosts_entry ()
{
	local IP="${1:-127.0.0.1}"
	local HOSTS
	local USAGE="Usage: ${0} ip_address hostname [hostname ...]"

	shift
	if [[ ${#} -eq 0 ]]; then
		echo "${USAGE}" >&2
		exit 1
	fi

	while (( ${#} )); do
		if [[ ${1} != localhost ]] \
			&& [[ ${1} != 127.0.0.1 ]] \
			&& [[ ${1} != "${IP}" ]]; then
			HOSTS+=" ${1}"
		fi
		shift
	done

	printf -- "%s\t%s\n" "${IP}" "${HOSTS}" >> /etc/hosts
}

function enable_apache_modules ()
{
	local CONF_PATHS="/etc/services-config/httpd/conf/httpd.conf"
	local MODULES="${1:-}"
	local MODULES_ENABLED=""
	local SED_COMMAND=""

	if [[ -f /etc/httpd/conf.modules.d/00-base.conf ]]; then
		# Available Apache 2.4 DSO Modules
		declare -a MODULE_IDENTFIERS=(
			'access_compat_module'
			'actions_module'
			'alias_module'
			'allowmethods_module'
			'auth_basic_module'
			'auth_digest_module'
			'authn_anon_module'
			'authn_core_module'
			'authn_dbd_module'
			'authn_dbm_module'
			'authn_file_module'
			'authn_socache_module'
			'authz_core_module'
			'authz_dbd_module'
			'authz_dbm_module'
			'authz_groupfile_module'
			'authz_host_module'
			'authz_owner_module'
			'authz_user_module'
			'autoindex_module'
			'cache_module'
			'cache_disk_module'
			'cache_socache_module'
			'data_module'
			'dbd_module'
			'deflate_module'
			'dir_module'
			'dumpio_module'
			'echo_module'
			'env_module'
			'expires_module'
			'ext_filter_module'
			'filter_module'
			'headers_module'
			'http2_module'
			'include_module'
			'info_module'
			'log_config_module'
			'logio_module'
			'macro_module'
			'mime_magic_module'
			'mime_module'
			'negotiation_module'
			'remoteip_module'
			'reqtimeout_module'
			'request_module'
			'rewrite_module'
			'setenvif_module'
			'slotmem_plain_module'
			'slotmem_shm_module'
			'socache_dbm_module'
			'socache_memcache_module'
			'socache_shmcb_module'
			'status_module'
			'substitute_module'
			'suexec_module'
			'unique_id_module'
			'unixd_module'
			'userdir_module'
			'version_module'
			'vhost_alias_module'
			'watchdog_module'
			'dav_module'
			'dav_fs_module'
			'dav_lock_module'
			'lua_module'
			'proxy_module'
			'lbmethod_bybusyness_module'
			'lbmethod_byrequests_module'
			'lbmethod_bytraffic_module'
			'lbmethod_heartbeat_module'
			'proxy_ajp_module'
			'proxy_balancer_module'
			'proxy_connect_module'
			'proxy_express_module'
			'proxy_fcgi_module'
			'proxy_fdpass_module'
			'proxy_ftp_module'
			'proxy_http_module'
			'proxy_hcheck_module'
			'proxy_scgi_module'
			'proxy_wstunnel_module'
		)
	else
		# Available Apache 2.2 DSO Modules
		declare -a MODULE_IDENTFIERS=(
			'auth_basic_module'
			'auth_digest_module'
			'authn_file_module'
			'authn_alias_module'
			'authn_anon_module'
			'authn_dbm_module'
			'authn_default_module'
			'authz_host_module'
			'authz_user_module'
			'authz_owner_module'
			'authz_groupfile_module'
			'authz_dbm_module'
			'authz_default_module'
			'ldap_module'
			'authnz_ldap_module'
			'include_module'
			'log_config_module'
			'logio_module'
			'env_module'
			'ext_filter_module'
			'mime_magic_module'
			'expires_module'
			'deflate_module'
			'headers_module'
			'usertrack_module'
			'setenvif_module'
			'mime_module'
			'dav_module'
			'status_module'
			'autoindex_module'
			'info_module'
			'dav_fs_module'
			'vhost_alias_module'
			'negotiation_module'
			'dir_module'
			'actions_module'
			'speling_module'
			'userdir_module'
			'alias_module'
			'substitute_module'
			'rewrite_module'
			'proxy_module'
			'proxy_balancer_module'
			'proxy_ftp_module'
			'proxy_http_module'
			'proxy_ajp_module'
			'proxy_connect_module'
			'cache_module'
			'suexec_module'
			'disk_cache_module'
			'cgi_module'
			'version_module'
			'reqtimeout_module'
			'asis_module'
			'authn_dbd_module'
			'cern_meta_module'
			'cgid_module'
			'dbd_module'
			'dumpio_module'
			'filter_module'
			'ident_module'
			'log_forensic_module'
			'unique_id_module'
		)
	fi

	if [[ -n ${MODULES} ]]; then
		for MODULE_IDENTFIER in ${MODULES}; do
			# Prevent invalid or unavailable module identifiers
			if [[ " ${MODULE_IDENTFIERS[@]} " =~ " ${MODULE_IDENTFIER} " ]]; then
				MODULES_ENABLED+=" - ${MODULE_IDENTFIER}\n"
				SED_COMMAND+="$(
					printf -- \
						" -e 's~^#LoadModule %s ~LoadModule %s ~g'" \
						"${MODULE_IDENTFIER}" \
						"${MODULE_IDENTFIER}"
				)"
			fi
		done

		if [[ -n ${SED_COMMAND} ]]; then

			for CONF_FILE in 00-base 00-dav 00-lua 00-optional 00-proxy; do
				if [[ -f /etc/httpd/conf.modules.d/${CONF_FILE}.conf ]]; then
					CONF_PATHS+=" /etc/httpd/conf.modules.d/${CONF_FILE}.conf"
				fi
			done

			eval "$(
				printf -- \
					'sed -i %s %s' \
					"${SED_COMMAND}" \
					"${CONF_PATHS}"
			)"
		fi

		printf -- "%b" "${MODULES_ENABLED}"
	fi
}

function get_apache_content_root ()
{
	local DEFAULT_VALUE="${1:-/var/www/app}"
	local VALUE="${APACHE_CONTENT_ROOT:-}"

	if [[ -z ${VALUE} ]] || ! is_valid_apache_content_root "${VALUE}"; then
		VALUE="${DEFAULT_VALUE}"
	fi

	printf -- "%s" "${VALUE}"
}

function get_apache_header_x_service_uid ()
{
	local HOST_NAME="${HOSTNAME:-}"
	local VALUE="${APACHE_HEADER_X_SERVICE_UID:-}"

	if [[ -n ${VALUE} ]]; then
		if [[ -z ${HOST_NAME} ]]; then
			HOST_NAME="$(
				hostname
			)"
		fi

		# Replace {{HOSTNAME}} with system hostname
		VALUE="${VALUE//\{\{HOSTNAME\}\}/${HOST_NAME}}"
	fi

	printf -- \
		'%s' \
		"${VALUE}"
}

function get_apache_public_directory ()
{
	local DEFAULT_VALUE="${1:-public_html}"
	local VALUE="${APACHE_PUBLIC_DIRECTORY:-}"

	if [[ -z ${VALUE} ]] || ! is_valid_apache_public_directory "${VALUE}"; then
		VALUE="${DEFAULT_VALUE}"
	fi

	printf -- "%s" "${VALUE}"
}

function get_password ()
{
	local PASSWORD_LENGTH="${1:-16}"
	local PASSWORD="$(
		head -n 4096 /dev/urandom \
		| tr -cd '[:alnum:]' \
		| cut -c1-"${PASSWORD_LENGTH}"
	)"

	printf -- "%s" "${PASSWORD}"

	return 0
}

function get_ssl_certificate_fingerprint ()
{
	local DIGEST="${1:-sha1}"
	local VALUE

	VALUE="$(
		openssl x509 \
			-"${DIGEST,,}" \
			-in /etc/services-config/ssl/certs/localhost.crt \
			-noout \
			-fingerprint
	)"

	VALUE="${VALUE//${DIGEST^^}' Fingerprint='/}"

	printf -- "%s" "${VALUE}"
}


function is_valid_apache_content_root ()
{
	local DIRECTORY_PATH="${1:-}"
	local DIRECTORY_PATH_ABSOLUTE="$(
		absolute_path \
			"${DIRECTORY_PATH}"
	)"
	local VALID_DIRECTORY='^\/(?!\/|bin|dev|etc|lib|lib64|lost+found|media|proc|root|sbin|sys|tmp|usr).+$'

	if grep -qoP "${VALID_DIRECTORY}" <<< "${DIRECTORY_PATH_ABSOLUTE}"; then
		return 0
	fi

	return 1
}

function is_valid_apache_public_directory ()
{
	local DIRECTORY="${1:-}"
	local DIRECTORY_ABSOLUTE="$(
		absolute_path "$(
			get_apache_content_root
		)/${DIRECTORY}"
	)"
	local VALID_DIRECTORY='^\/(?!\/|bin|dev|etc|lib|lib64|lost+found|media|proc|root|sbin|sys|tmp|usr).+$'
	local VALID_SUBDIRECTORY='^[^\/\\].+$'

	if grep -qoP "${VALID_DIRECTORY}" <<< "${DIRECTORY_ABSOLUTE}"; then
		return 0
	fi

	if grep -qoP "${VALID_SUBDIRECTORY}" <<< "${DIRECTORY}"; then
		return 0
	fi

	return 1
}

function is_valid_apache_ssl_certificate ()
{
	local VALID_PATTERN='^SHA1 Fingerprint='
	local SHA1_FINGERPRINT

	SHA1_FINGERPRINT="$(
		openssl \
			x509 \
			-sha1 \
			-in /etc/services-config/ssl/certs/localhost.crt \
			-noout \
			-fingerprint
	)"

	if [[ ${SHA1_FINGERPRINT} =~ ${VALID_PATTERN} ]]; then
		return 0
	fi

	return 1
}

function is_valid_user_login ()
{
	local LOGIN="${1}"
	local SAFE_LOGIN='^[a-z_][a-z0-9_-]{0,29}[$a-z0-9_]?$'

	if [[ ${LOGIN} != root ]] && [[ ${LOGIN} =~ ${SAFE_LOGIN} ]]; then
		return 0
	fi

	return 1
}

function load_httpd_conf_scan_files ()
{
	local FILE_PATH
	local PACKAGE_PATH="${1:-}"

	if [[ -n ${PACKAGE_PATH} ]] \
		&& [[ -d ${PACKAGE_PATH}/etc/httpd/conf.d ]]; then
		for FILE_PATH in "${PACKAGE_PATH}"/etc/httpd/conf.d/*.conf; do
			cat  \
				"${FILE_PATH}" \
			> "/etc/services-config/httpd/conf.d/${FILE_PATH##*/}"
		done
	fi
}

function load_php_ini_scan_files ()
{
	local FILE_PATH
	local PACKAGE_PATH="${1:-}"
	local SCAN_DIRECTORY="/etc/php.d"

	if [[ -n ${PACKAGE_PATH} ]] \
		&& [[ -d ${PACKAGE_PATH}/etc/php.d ]]; then
		# Replace environment variables to support fcgid php-wrapper
		for FILE_PATH in "${PACKAGE_PATH}"/etc/php.d/*.ini; do
			printf -- \
				'%s' \
				"$(
					eval \
						"cat <<-EOF
							$(<"${FILE_PATH}")
						EOF" 2> /dev/null
				)" \
			> "${SCAN_DIRECTORY}/${FILE_PATH##*/}"
		done
	fi
}

function make_self_signed_san_certificate ()
{
	local CN
	local HOST
	local HOSTS="${@}"
	local SAN

	# Use default host if none specified.
	if [[ ${#HOSTS[@]} -eq 0 ]]; then
		HOSTS="localhost.localdomain"
	fi

	if [[ ${#HOSTS[@]} -gt 0 ]]; then
		for HOST in ${HOSTS[@]}; do
			if [[ -z ${SAN} ]]; then
				# Common Name is required - use the first host.
				CN="${HOST}"
			else
				# Additional hosts should be comma separated.
				SAN+=","
			fi

			# Build up the subjectAltName value.
			SAN+="DNS:${HOST}"
		done
	fi

	# Generate a custom openssl configuration - appending a san section.
	cat \
		/etc/pki/tls/openssl.cnf \
		- \
		<<-CONFIG > /etc/services-config/ssl/certs/localhost.cnf

	[ san ]
	subjectAltName="${SAN:-root@localhost.localdomain}"
	CONFIG

	# Generate the certificate.
	openssl req \
		-x509 \
		-sha256 \
		-nodes \
		-newkey rsa:2048 \
		-days 365 \
		-reqexts san \
		-extensions san \
		-subj "/CN=${CN}" \
		-config /etc/services-config/ssl/certs/localhost.cnf \
		-keyout /etc/services-config/ssl/certs/localhost.crt \
		-out /etc/services-config/ssl/certs/localhost.crt

}

function set_apache_enable_sendfile ()
{
	local ENABLED=${1:-true}
	local PATTERN_FROM
	local PATTERN_TO

	if [[ ${ENABLED} == true ]]; then
		PATTERN_FROM="^[#]?EnableSendfile (Off|off)$"
		PATTERN_TO="#EnableSendfile on"
	else
		echo "Disabling EnableSendfile."
		PATTERN_FROM="^[#]?EnableSendfile (On|on|Off|off)$"
		PATTERN_TO="EnableSendfile off"
	fi

	sed -i \
		-re "s~${PATTERN_FROM}~${PATTERN_TO}~g" \
		/etc/services-config/httpd/conf/httpd.conf
}

function set_apache_extended_status ()
{
	local ENABLED=${1:-false}
	local PATTERN_FROM
	local PATTERN_TO

	if [[ ${ENABLED} == true ]]; then
		echo "Enabling ExtendedStatus."
		PATTERN_FROM="^[#]?ExtendedStatus (On|on|Off|off)$"
		PATTERN_TO="ExtendedStatus On"
	else
		PATTERN_FROM="^ExtendedStatus (On|on)$"
		PATTERN_TO="#ExtendedStatus On"
	fi

	sed -i \
		-re "s~${PATTERN_FROM}~${PATTERN_TO}~g" \
		/etc/services-config/httpd/conf/httpd.conf
}

function set_apache_header_x_service_uid ()
{
	local HEADER="${1:-}"

	# Disable setting the X-Service-UID header if an empty value.
	if [[ -z ${HEADER} ]]; then
		sed -i \
			-e 's~^\([ \t]*\)\(Header set X-Service-UID .*\)$~\1#\2~g' \
			/etc/services-config/httpd/conf.d/00-headers.conf
	fi
}

function set_apache_mpm ()
{
	local MPM="${1:-APACHE_MPM}"

	case "${MPM,,}" in
		event)
			if [[ -f /etc/httpd/conf.modules.d/00-mpm.conf ]]; then
				sed -i \
					-e 's~^\(LoadModule.*\)$~#\1~g' \
					-e 's~^#\(LoadModule mpm_event_module.*\)$~\1~' \
					/etc/httpd/conf.modules.d/00-mpm.conf
			else
				printf -- \
					'ERROR: Invalid Apache Server MPM: %s\n' \
					"${OPTS_APACHE_MPM}" >&2
				exit 1
			fi
			;;
		worker)
			if [[ -f /etc/httpd/conf.modules.d/00-mpm.conf ]]; then
				sed -i \
					-e 's~^\(LoadModule.*\)$~#\1~g' \
					-e 's~^#\(LoadModule mpm_worker_module.*\)$~\1~' \
					/etc/httpd/conf.modules.d/00-mpm.conf
			elif [[ -f /usr/sbin/httpd.worker ]]; then
				sed -i \
					-e "s~^#HTTPD=/usr/sbin/httpd.worker~HTTPD=/usr/sbin/httpd.worker~g" \
					/etc/sysconfig/httpd
			else
				printf -- \
					'ERROR: Invalid Apache Server MPM: %s\n' \
					"${OPTS_APACHE_MPM}" >&2
				exit 1
			fi
			;;
		prefork)
			if [[ -f /etc/httpd/conf.modules.d/00-mpm.conf ]]; then
				sed -i \
					-e 's~^\(LoadModule.*\)$~#\1~g' \
					-e 's~^#\(LoadModule mpm_prefork_module.*\)$~\1~' \
					/etc/httpd/conf.modules.d/00-mpm.conf
			else
				sed -i \
					-e "s~^HTTPD=/usr/sbin/httpd.worker~#HTTPD=/usr/sbin/httpd.worker~g" \
					/etc/sysconfig/httpd
			fi
			;;
		*)
			printf -- \
				'ERROR: Invalid Apache Server MPM: %s\n' \
				"${OPTS_APACHE_MPM}" >&2
			exit 1
			;;
	esac
}

function set_apache_server_name ()
{
	local HOST_NAME="${1:-${APACHE_SERVER_NAME:-$(hostname)}}"
	local PORT="${2:-80}"

	sed -i \
		-e "s~^#ServerName \(.*\):80$~ServerName ${HOST_NAME}:${PORT}~g" \
		/etc/services-config/httpd/conf/httpd.conf
}

function set_apache_ssl_certificate ()
{
	local SSL_CERTIFICATE="${1:-}"
	local PLAIN_TEXT_PATTERN='^-----BEGIN '
	local BASE64_PATTERN='^[A-Za-z0-9/+=]*$'

	if [[ -n ${SSL_CERTIFICATE} ]]; then
		# Decode base64 encoded values
		if [[ ${SSL_CERTIFICATE} =~ ${BASE64_PATTERN} ]]; then
			SSL_CERTIFICATE="$(
				base64 -d -i <<< "${SSL_CERTIFICATE}"
			)"
		fi

		if [[ ! ${SSL_CERTIFICATE} =~ ${PLAIN_TEXT_PATTERN} ]]; then
			printf -- \
				'ERROR: Invalid APACHE_SSL_CERTIFICATE\n' \
				>&2
			sleep 0.1
			exit 1
		fi

		printf \
			-- '%s' \
			"${SSL_CERTIFICATE}" \
		> /etc/services-config/ssl/certs/localhost.crt

		if [[ -s /etc/services-config/ssl/certs/localhost.crt ]] \
			&& ! is_valid_apache_ssl_certificate; then
			printf -- \
				'ERROR: Invalid APACHE_SSL_CERTIFICATE\n' \
				>&2
			sleep 0.1
			exit 1
		fi
	fi
}

function update_group_name ()
{
	local GROUP_FROM="${1}"
	local GROUP_TO="${2}"

	if [[ ${GROUP_TO} != "${GROUP_FROM}" ]] \
		&& [[ ${GROUP_TO} != root ]] \
		&& [[ ${GROUP_FROM} != root ]] \
		&& [[ -n $(getent group "${GROUP_FROM}") ]]; then
		groupmod -n "${GROUP_TO}" "${GROUP_FROM}"
	fi
}

function update_user_login ()
{
	local USER_FROM="${1}"
	local USER_TO="${2}"

	if [[ ${USER_TO} != "${USER_FROM}" ]] \
		&& is_valid_user_login "${USER_TO}" \
		&& is_valid_user_login "${USER_FROM}" \
		&& [[ -z $(getent passwd "${USER_TO}") ]] \
		&& [[ -n $(getent passwd "${USER_FROM}") ]]; then
		usermod -l "${USER_TO}" "${USER_FROM}"
	fi
}

DEFAULT_SYSTEM_USER=app
DEFAULT_APACHE_USER=app-www
if [[ -f /etc/httpd/conf.modules.d/00-base.conf ]]; then
	# Default Apache 2.4 DSO Modules
	DEFAULT_APACHE_LOAD_MODULES="
	 authz_core_module
	 authz_user_module
	 log_config_module
	 expires_module
	 deflate_module
	 filter_module
	 headers_module
	 setenvif_module
	 socache_shmcb_module
	 mime_module
	 status_module
	 dir_module
	 alias_module
	 unixd_module
	 version_module
	 proxy_module
	 proxy_fcgi_module
	"
else
	# Default Apache 2.2 DSO Modules
	DEFAULT_APACHE_LOAD_MODULES="
	 authz_user_module
	 log_config_module
	 expires_module
	 deflate_module
	 headers_module
	 setenvif_module
	 mime_module
	 status_module
	 dir_module
	 alias_module
	 version_module
	"
fi
PACKAGE_PATH="${PACKAGE_PATH:-/opt/app}"
PASSWORD_LENGTH=16

OPTS_APACHE_CONTENT_ROOT="$(
	get_apache_content_root
)"
OPTS_APACHE_DOCUMENT_ROOT="${OPTS_APACHE_CONTENT_ROOT}/$(
	get_apache_public_directory
)"
OPTS_APACHE_EXTENDED_STATUS_ENABLED="${APACHE_EXTENDED_STATUS_ENABLED:-false}"
OPTS_APACHE_HEADER_X_SERVICE_UID="$(
	get_apache_header_x_service_uid
)"
OPTS_APACHE_LOAD_MODULES="${APACHE_LOAD_MODULES:-${DEFAULT_APACHE_LOAD_MODULES}}"
OPTS_APACHE_MOD_SSL_ENABLED="${APACHE_MOD_SSL_ENABLED:-false}"
OPTS_APACHE_MPM="${APACHE_MPM:-prefork}"
OPTS_APACHE_RUN_GROUP="${APACHE_RUN_GROUP:-${DEFAULT_APACHE_USER}}"
OPTS_APACHE_RUN_USER="${APACHE_RUN_USER:-${DEFAULT_APACHE_USER}}"
OPTS_APACHE_SERVER_ALIAS="${APACHE_SERVER_ALIAS:-}"
OPTS_APACHE_SERVER_NAME="${APACHE_SERVER_NAME:-$(hostname)}"
OPTS_APACHE_SSL_CERTIFICATE="${APACHE_SSL_CERTIFICATE:-}"
OPTS_APACHE_SYSTEM_USER="${APACHE_SYSTEM_USER:-${DEFAULT_SYSTEM_USER}}"

# Load app package Apache configuration files.
load_httpd_conf_scan_files "${PACKAGE_PATH}"

# Load app package PHP configuration files.
load_php_ini_scan_files "${PACKAGE_PATH}"

# Populate SSL certificate file.
if [[ ${OPTS_APACHE_MOD_SSL_ENABLED} == true ]] \
	&& [[ -n ${OPTS_APACHE_SSL_CERTIFICATE} ]]; then
	set_apache_ssl_certificate "${OPTS_APACHE_SSL_CERTIFICATE}"
fi

# Generate SSL certificate.
if [[ ${OPTS_APACHE_MOD_SSL_ENABLED} == true ]] \
	&& [[ ! -f /etc/services-config/ssl/certs/localhost.crt ]]; then
	make_self_signed_san_certificate \
		"${OPTS_APACHE_SERVER_NAME}" \
		"${OPTS_APACHE_SERVER_ALIAS}" \
		1&> /dev/null \
		&

	PIDS[2]=${!}
fi

# Set the system user passwords
echo "${DEFAULT_SYSTEM_USER}:$(
	get_password ${PASSWORD_LENGTH}
)" | chpasswd \
&
PIDS[0]=${!}

echo "${DEFAULT_APACHE_USER}:$(
	get_password ${PASSWORD_LENGTH}
)" | chpasswd \
&
PIDS[1]=${!}

# Verify package installation directory exists
if [[ ! -d ${PACKAGE_PATH} ]]; then
	echo "ERROR: ${PACKAGE_PATH} not found." >&2
	exit 1
fi

# Initialise Apache server root directory.
APACHE_SERVER_HOME="$(
	dirname \
		"${OPTS_APACHE_CONTENT_ROOT}"
)"

if [[ ! -d ${APACHE_SERVER_HOME} ]]; then
	echo "Create home directory ${APACHE_SERVER_HOME}."
	mkdir -p -m 755 "${APACHE_SERVER_HOME}"
fi

if [[ ! -d ${OPTS_APACHE_CONTENT_ROOT} ]]; then
	echo "Linking install directory ${PACKAGE_PATH} > ${OPTS_APACHE_CONTENT_ROOT}."
	ln -s \
		"${PACKAGE_PATH}" \
		"${OPTS_APACHE_CONTENT_ROOT}"
fi

if [[ -d ${OPTS_APACHE_CONTENT_ROOT} ]] \
	&& [[ ! -h ${OPTS_APACHE_CONTENT_ROOT} ]] \
	&& [[ -z $(find "${OPTS_APACHE_CONTENT_ROOT}" -maxdepth 1 -type f) ]]; then
	echo "Populating install directory ${PACKAGE_PATH} > ${OPTS_APACHE_CONTENT_ROOT}."
	cp -rpf \
		"${PACKAGE_PATH}"/. \
		"${OPTS_APACHE_CONTENT_ROOT}"
fi

# Verify Apache DocumentRoot directory exists
if [[ ! -d ${OPTS_APACHE_DOCUMENT_ROOT} ]]; then
	echo "ERROR: ${OPTS_APACHE_DOCUMENT_ROOT} not found." >&2
	exit 1
fi

APACHE_DOCUMENT_ROOT_FILE_SYSTEM=$(
	df -PT "${OPTS_APACHE_DOCUMENT_ROOT}" \
		| awk 'NR>1 { print $2 }'
)

# Server MPM
set_apache_mpm "${OPTS_APACHE_MPM}"
printf -- \
	'Apache Server MPM: %s\n' \
	"${OPTS_APACHE_MPM^}"

# Add local hosts entries
add_hosts_entry \
	127.0.0.1 \
	"$(
		printf -- \
			'%s%s%s' \
			"${OPTS_APACHE_SERVER_NAME}" \
			"${OPTS_APACHE_SERVER_ALIAS:+ }" \
			"${OPTS_APACHE_SERVER_ALIAS}"
	)"

# Set Apache EnableSendfile
if [[ ${APACHE_DOCUMENT_ROOT_FILE_SYSTEM} == nfs ]]; then
	set_apache_enable_sendfile false
else
	set_apache_enable_sendfile true
fi

# Set Apache ExtendedStatus
set_apache_extended_status "${OPTS_APACHE_EXTENDED_STATUS_ENABLED}"

# Set Apache X-Service-UID Header
set_apache_header_x_service_uid "${OPTS_APACHE_HEADER_X_SERVICE_UID}"

# Set Apache ServerName
set_apache_server_name "${OPTS_APACHE_SERVER_NAME}" 80

# Enable Apache modules
APACHE_MODULES_ENABLED=$(
	enable_apache_modules "${OPTS_APACHE_LOAD_MODULES}" \
	| sort
)

# Enable/Disable SSL support
if [[ ${OPTS_APACHE_MOD_SSL_ENABLED} == true ]]; then
	echo "Enabling SSL support."
	cat \
		/etc/httpd/conf.d/ssl.conf.off \
		> /etc/httpd/conf.d/ssl.conf

	if [[ -f /etc/services-config/httpd/conf.d/10-ssl-vhost.conf.off ]]; then
		cat \
			/etc/services-config/httpd/conf.d/10-ssl-vhost.conf.off \
			> /etc/services-config/httpd/conf.d/10-ssl-vhost.conf
	fi

	if [[ -f /etc/httpd/conf.modules.d/00-ssl.conf ]]; then
		sed -i \
			-e 's~^#\(LoadModule ssl_module .*\)$~\1~' \
			/etc/httpd/conf.modules.d/00-ssl.conf
	fi
else
	> /etc/httpd/conf.d/ssl.conf

	if [[ -f /etc/services-config/httpd/conf.d/10-ssl-vhost.conf ]]; then
		> /etc/services-config/httpd/conf.d/10-ssl-vhost.conf
	fi

	if [[ -f /etc/httpd/conf.modules.d/00-ssl.conf ]]; then
		sed -i \
			-e 's~^\(LoadModule ssl_module .*\)$~#\1~' \
			/etc/httpd/conf.modules.d/00-ssl.conf
	fi
fi

# Set ownership for fcgid php-wrapper and socket if necessary
if [[ -d ${PACKAGE_PATH}/bin && -d /var/run/mod_fcgid ]]; then
	chown -R \
		"${OPTS_APACHE_RUN_USER}":"${OPTS_APACHE_RUN_GROUP}" \
		{"${PACKAGE_PATH}"/bin,/var/run/mod_fcgid}
fi

# Set the system user's login names and groups
update_user_login "${DEFAULT_SYSTEM_USER}" "${OPTS_APACHE_SYSTEM_USER}"
update_group_name "${DEFAULT_SYSTEM_USER}" "${OPTS_APACHE_SYSTEM_USER}"
update_user_login "${DEFAULT_APACHE_USER}" "${OPTS_APACHE_RUN_USER}"
update_group_name "${DEFAULT_APACHE_USER}" "${OPTS_APACHE_RUN_GROUP}"

# Wait for background processes
wait ${PIDS[0]}
wait ${PIDS[1]}

SSL_CRT_FINGERPRINT_DETAILS=
if [[ ${OPTS_APACHE_MOD_SSL_ENABLED} == true ]]; then
	# Wait for certificate generation if necessary
	[[ -n ${PIDS[2]} ]] && wait ${PIDS[2]}

	DIGEST=sha1
	FINGERPRINT="$(
		get_ssl_certificate_fingerprint \
			"${DIGEST}"
	)"

	printf -v \
		DETAILS_LABEL \
		-- 'ssl certificate %s fingerprint : ' \
		"${DIGEST}"

	printf -v \
		SSL_CRT_FINGERPRINT_DETAILS \
		-- '\n%s\n%s' \
		"${DETAILS_LABEL}" \
		"${FINGERPRINT}"
fi

TIMER_TOTAL="$(
	echo - | awk "\
	{ T1=\"${TIMER_START}\" } \
	{ T2=\"$(date +%s.%N)\" } \
	{ print T2 - T1; }"
)"

cat <<-EOT

	================================================================================
	Apache Details
	--------------------------------------------------------------------------------
	system user : ${OPTS_APACHE_SYSTEM_USER}
	run user : ${OPTS_APACHE_RUN_USER}
	run group : ${OPTS_APACHE_RUN_GROUP}
	server name : ${OPTS_APACHE_SERVER_NAME}
	server alias : ${OPTS_APACHE_SERVER_ALIAS}
	header x-service-uid : ${OPTS_APACHE_HEADER_X_SERVICE_UID:-unset}
	document root : ${OPTS_APACHE_DOCUMENT_ROOT} (${APACHE_DOCUMENT_ROOT_FILE_SYSTEM})
	modules enabled :
	${APACHE_MODULES_ENABLED}${SSL_CRT_FINGERPRINT_DETAILS}
	--------------------------------------------------------------------------------
	${TIMER_TOTAL}

EOT

# Release lock file
rm -f /tmp/httpd-bootstrap.lock

exit 0
