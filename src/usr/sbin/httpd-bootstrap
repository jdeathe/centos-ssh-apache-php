#!/usr/bin/env bash

# Create lock file
touch /var/lock/subsys/httpd-bootstrap

TIMER_START="$(
	date +%s.%N
)"

function __absolute_path ()
{
	local -r directory_path="${1}"

	local value

	if [[ -n ${directory_path} ]]
	then
		value="$(
			python -c "import os,sys; print os.path.abspath(sys.argv[1])" \
				"${directory_path}"
		)"
	fi

	printf -- '%s' "${value}"
}

function __add_hosts_entry ()
{
	local address="${1:-127.0.0.1}"
	local hosts
	local usage="Usage: ${0} ip_address hostname [hostname ...]"

	shift
	if [[ "${#}" -eq 0 ]]
	then
		>&2 printf -- \
			'%s\n' \
			"${usage}"
		exit 1
	fi

	while (( "${#}" ))
	do
		if [[ ${1} != localhost ]] \
			&& [[ ${1} != 127.0.0.1 ]] \
			&& [[ ${1} != "${address}" ]]
		then
			hosts+=" ${1}"
		fi
		shift
	done

	printf -- \
		'%s\t%s\n' \
		"${address}" \
		"${hosts}" \
		>> /etc/hosts
}

function __enable_apache_modules ()
{
	local config_file
	local -a config_files=(
		'00-base.conf'
		'00-dav.conf'
		'00-lua.conf'
		'00-optional.conf'
		'00-proxy.conf'
	)
	local config_paths="/etc/httpd/conf/httpd.conf"
	local identifier
	local -a identifiers
	local -a identifiers_default
	local modules="${1}"
	local enabled
	local sed_command

	if [[ -f /etc/httpd/conf.modules.d/00-base.conf ]]
	then
		# Apache 2.4

		# Default DSO Modules
		identifiers_default=(
			'authz_core_module'
			'authz_user_module'
			'log_config_module'
			'expires_module'
			'deflate_module'
			'filter_module'
			'headers_module'
			'setenvif_module'
			'socache_shmcb_module'
			'mime_module'
			'status_module'
			'dir_module'
			'alias_module'
			'unixd_module'
			'version_module'
			'proxy_module'
			'proxy_fcgi_module'
		)

		# Available DSO Modules
		identifiers=(
			'access_compat_module'
			'actions_module'
			'alias_module'
			'allowmethods_module'
			'auth_basic_module'
			'auth_digest_module'
			'authn_anon_module'
			'authn_core_module'
			'authn_dbd_module'
			'authn_dbm_module'
			'authn_file_module'
			'authn_socache_module'
			'authz_core_module'
			'authz_dbd_module'
			'authz_dbm_module'
			'authz_groupfile_module'
			'authz_host_module'
			'authz_owner_module'
			'authz_user_module'
			'autoindex_module'
			'cache_module'
			'cache_disk_module'
			'cache_socache_module'
			'data_module'
			'dbd_module'
			'deflate_module'
			'dir_module'
			'dumpio_module'
			'echo_module'
			'env_module'
			'expires_module'
			'ext_filter_module'
			'filter_module'
			'headers_module'
			'http2_module'
			'include_module'
			'info_module'
			'log_config_module'
			'logio_module'
			'macro_module'
			'mime_magic_module'
			'mime_module'
			'negotiation_module'
			'remoteip_module'
			'reqtimeout_module'
			'request_module'
			'rewrite_module'
			'setenvif_module'
			'slotmem_plain_module'
			'slotmem_shm_module'
			'socache_dbm_module'
			'socache_memcache_module'
			'socache_shmcb_module'
			'status_module'
			'substitute_module'
			'suexec_module'
			'unique_id_module'
			'unixd_module'
			'userdir_module'
			'version_module'
			'vhost_alias_module'
			'watchdog_module'
			'dav_module'
			'dav_fs_module'
			'dav_lock_module'
			'lua_module'
			'proxy_module'
			'lbmethod_bybusyness_module'
			'lbmethod_byrequests_module'
			'lbmethod_bytraffic_module'
			'lbmethod_heartbeat_module'
			'proxy_ajp_module'
			'proxy_balancer_module'
			'proxy_connect_module'
			'proxy_express_module'
			'proxy_fcgi_module'
			'proxy_fdpass_module'
			'proxy_ftp_module'
			'proxy_http_module'
			'proxy_hcheck_module'
			'proxy_scgi_module'
			'proxy_wstunnel_module'
		)
	else
		# Apache 2.2

		# Default DSO Modules
		identifiers_default=(
			'authz_user_module'
			'log_config_module'
			'expires_module'
			'deflate_module'
			'headers_module'
			'setenvif_module'
			'mime_module'
			'status_module'
			'dir_module'
			'alias_module'
			'version_module'
		)

		# Available DSO Modules
		identifiers=(
			'auth_basic_module'
			'auth_digest_module'
			'authn_file_module'
			'authn_alias_module'
			'authn_anon_module'
			'authn_dbm_module'
			'authn_default_module'
			'authz_host_module'
			'authz_user_module'
			'authz_owner_module'
			'authz_groupfile_module'
			'authz_dbm_module'
			'authz_default_module'
			'ldap_module'
			'authnz_ldap_module'
			'include_module'
			'log_config_module'
			'logio_module'
			'env_module'
			'ext_filter_module'
			'mime_magic_module'
			'expires_module'
			'deflate_module'
			'headers_module'
			'usertrack_module'
			'setenvif_module'
			'mime_module'
			'dav_module'
			'status_module'
			'autoindex_module'
			'info_module'
			'dav_fs_module'
			'vhost_alias_module'
			'negotiation_module'
			'dir_module'
			'actions_module'
			'speling_module'
			'userdir_module'
			'alias_module'
			'substitute_module'
			'rewrite_module'
			'proxy_module'
			'proxy_balancer_module'
			'proxy_ftp_module'
			'proxy_http_module'
			'proxy_ajp_module'
			'proxy_connect_module'
			'cache_module'
			'suexec_module'
			'disk_cache_module'
			'cgi_module'
			'version_module'
			'reqtimeout_module'
			'asis_module'
			'authn_dbd_module'
			'cern_meta_module'
			'cgid_module'
			'dbd_module'
			'dumpio_module'
			'filter_module'
			'ident_module'
			'log_forensic_module'
			'unique_id_module'
		)
	fi

	for identifier in "${identifiers_default[@]}"
	do
		# Prevent invalid or unavailable module identifiers
		if [[ " ${identifiers[@]} " =~ " ${identifier} " ]]
		then
			enabled+=" - ${identifier}\n"
			sed_command+="$(
				printf -- \
					" -e 's~^#LoadModule %s ~LoadModule %s ~g'" \
					"${identifier}" \
					"${identifier}"
			)"
		fi
	done

	if [[ -n ${modules} ]]
	then
		for identifier in ${modules}
		do
			# Prevent invalid, unavailable or duplicate module identifiers
			if [[ " ${identifiers[@]} " =~ " ${identifier} " ]] \
				&& ! [[ " ${identifiers_default[@]} " =~ " ${identifier} " ]]
			then
				enabled+=" - ${identifier}\n"
				sed_command+="$(
					printf -- \
						" -e 's~^#LoadModule %s ~LoadModule %s ~g'" \
						"${identifier}" \
						"${identifier}"
				)"
			fi
		done
	fi

	if [[ -n ${sed_command} ]]
	then
		for config_file in "${config_files[@]}"
		do
			if [[ -f /etc/httpd/conf.modules.d/${config_file} ]]
			then
				config_paths+=" /etc/httpd/conf.modules.d/${config_file}"
			fi
		done

		eval "$(
			printf -- \
				'sed -i %s %s' \
				"${sed_command}" \
				"${config_paths}"
		)"
	fi

	printf -- \
		'%b' \
		"${enabled}" \
		| sort
}

function __get_apache_content_root ()
{
	local -r default_value="${1:-/var/www/app}"

	local value="${APACHE_CONTENT_ROOT:-/var/www/app}"

	if ! __is_valid_apache_content_root "${value}"
	then
		value="${default_value}"
	fi

	printf -- '%s' "${value}"
}

function __get_apache_header_x_service_uid ()
{
	local value="${APACHE_HEADER_X_SERVICE_UID}"

	if [[ -n ${value} ]]
	then
		value="${value//'{{HOSTNAME}}'/${HOSTNAME:-localhost.localdomain}}"
	fi

	printf -- '%s' "${value}"
}

function __get_apache_public_directory ()
{
	local -r default_value="${1:-public_html}"

	local value="${APACHE_PUBLIC_DIRECTORY}"

	if ! __is_valid_apache_public_directory "${value}"
	then
		value="${default_value}"
	fi

	printf -- '%s' "${value}"
}

function __get_password ()
{
	local -r length="${1:-16}"
	local -r password="$(
		head -n 4096 /dev/urandom \
			| tr -cd '[:alnum:]' \
			| cut -c1-"${length}"
	)"

	printf -- '%s' "${password}"
}

function __get_ssl_certificate_fingerprint ()
{
	local -r digest="${1:-sha1}"
	local -r certificate_path="${2:-/etc/pki/tls/certs/localhost.crt}"

	local value

	value="$(
		openssl x509 \
			-"${digest,,}" \
			-in "${certificate_path}" \
			-noout \
			-fingerprint
	)"

	value="${value//${digest^^}' Fingerprint='/}"

	printf -- '%s' "${value}"
}

function __is_valid_apache_content_root ()
{
	local -r directory_path="${1}"
	local -r valid_directory='^\/(?!\/|bin|dev|etc|lib|lib64|lost+found|media|proc|root|sbin|sys|tmp|usr).+$'

	local absolute_path="$(
		__absolute_path \
			"${directory_path}"
	)"

	if grep -qoP "${valid_directory}" <<< "${absolute_path}"
	then
		return 0
	fi

	return 1
}

function __is_valid_apache_public_directory ()
{
	local -r directory="${1}"
	local -r directory_absolute="$(
		__absolute_path "$(
			__get_apache_content_root
		)/${directory}"
	)"
	local -r valid_directory='^\/(?!\/|bin|dev|etc|lib|lib64|lost+found|media|proc|root|sbin|sys|tmp|usr).+$'
	local -r valid_subdirectory='^[^\/\\].+$'

	if grep -qoP "${valid_directory}" <<< "${directory_absolute}"
	then
		return 0
	fi

	if grep -qoP "${valid_subdirectory}" <<< "${directory}"
	then
		return 0
	fi

	return 1
}

function __is_valid_apache_ssl_certificate ()
{
	local -r certificate_path="${1:-/etc/pki/tls/certs/localhost.crt}"
	local -r valid_pattern='^SHA1 Fingerprint='

	local fingerprint

	fingerprint="$(
		openssl \
			x509 \
			-sha1 \
			-in "${certificate_path}" \
			-noout \
			-fingerprint
	)"

	if [[ ${fingerprint} =~ ${valid_pattern} ]]
	then
		return 0
	fi

	return 1
}

function __is_valid_user_login ()
{
	local -r login="${1}"
	local -r valid_login='^[a-z_][a-z0-9_-]{0,29}[$a-z0-9_]?$'

	if [[ ${login} != root ]] \
		&& [[ ${login} =~ ${valid_login} ]]
	then
		return 0
	fi

	return 1
}

function __load_httpd_conf_scan_files ()
{
	local file_path
	local package_path="${1}"

	if [[ -n ${package_path} ]] \
		&& [[ -d ${package_path}/etc/httpd/conf.d ]]
	then
		for file_path in "${package_path}"/etc/httpd/conf.d/*.conf
		do
			cat  \
				"${file_path}" \
				> "/etc/httpd/conf.d/${file_path##*/}"
		done
	fi

	if [[ -n ${package_path} ]] \
		&& [[ -d ${package_path}/etc/httpd/conf.virtualhost.d ]]
	then
		for file_path in "${package_path}"/etc/httpd/conf.virtualhost.d/*.conf
		do
			cat  \
				"${file_path}" \
				> "/etc/httpd/conf.virtualhost.d/${file_path##*/}"
		done
	fi
}

function __load_php_ini_scan_file ()
{
	local -r file_path="${1}"
	local -r scan_directory="${2}"

	if [[ -n ${scan_directory} ]] \
		&& [[ -n ${file_path} ]] \
		&& [[ -s ${file_path} ]]
	then
		# Replace environment variables
		printf -- \
			'%s' \
			"$(
				eval \
					"cat <<-EOF
						$(<"${file_path}")
					EOF" 2> /dev/null
			)" \
			> "${scan_directory}/${file_path##*/}"
	fi
}

function __load_php_ini_scan_files ()
{
	local -r package_path="${1}"
	local -r scan_directory="/etc/php.d"

	local file_path

	for file_path in "${scan_directory}"/*.ini
	do
		__load_php_ini_scan_file \
			"${file_path}" \
			"${scan_directory}"
	done

	if [[ -n ${package_path} ]] \
		&& [[ -d ${package_path}/etc/php.d ]]
	then
		for file_path in "${package_path}/${scan_directory}"/*.ini
		do
			__load_php_ini_scan_file \
				"${file_path}" \
				"${scan_directory}"
		done
	fi
}

function __make_self_signed_san_certificate ()
{
	local -r certificate_path="/etc/pki/tls/certs/localhost.crt"
	local -r config_path="/etc/pki/tls/certs/localhost.cnf"
	local -r default_config_path="/etc/pki/tls/openssl.cnf"
	local -r hosts="${@}"

	local common_name
	local host
	local subject_alt_name

	# Use default host if none specified.
	if [[ ${#hosts[@]} -eq 0 ]]
	then
		hosts="localhost.localdomain"
	fi

	if [[ ${#hosts[@]} -gt 0 ]]
	then
		for host in ${hosts[@]}
		do
			if [[ -z ${subject_alt_name} ]]
			then
				# Common Name is required - use the first host.
				common_name="${host}"
			else
				# Additional hosts should be comma separated.
				subject_alt_name+=","
			fi

			# Build up the subjectAltName value.
			subject_alt_name+="DNS:${host}"
		done
	fi

	# Generate a custom openssl configuration - appending a san section.
	cat \
		"${default_config_path}" \
		- \
		<<-CONFIG > "${config_path}"

	[ san ]
	subjectAltName="${subject_alt_name:-root@localhost.localdomain}"
	CONFIG

	# Generate the certificate.
	openssl req \
		-x509 \
		-sha256 \
		-nodes \
		-newkey rsa:2048 \
		-days 365 \
		-reqexts san \
		-extensions san \
		-subj "/CN=${common_name}" \
		-config "${config_path}" \
		-keyout "${certificate_path}" \
		-out "${certificate_path}"
}

function __set_apache_enable_sendfile ()
{
	local enable="${1:-true}"
	local match
	local replace

	if [[ ${enable} == true ]]
	then
		match="^[#]?EnableSendfile (Off|off)$"
		replace="#EnableSendfile on"
	else
		match="^[#]?EnableSendfile (On|on|Off|off)$"
		replace="EnableSendfile off"
	fi

	sed -r -i \
		-e "s~${match}~${replace}~g" \
		/etc/httpd/conf/httpd.conf
}

function __set_apache_extended_status ()
{
	local enable="${1:-false}"
	local match
	local replace

	if [[ ${enable} == true ]]
	then
		match="^[#]?ExtendedStatus (On|on|Off|off)$"
		replace="ExtendedStatus On"
	else
		match="^ExtendedStatus (On|on)$"
		replace="#ExtendedStatus On"
	fi

	sed -r -i \
		-e "s~${match}~${replace}~g" \
		/etc/httpd/conf/httpd.conf
}

function __set_apache_header_x_service_uid ()
{
	local header="${1}"

	if [[ -n ${header} ]]
	then
		sed -i \
			-e "s~\${APACHE_HEADER_X_SERVICE_UID}~${header}~g" \
			/etc/httpd/conf.d/00-headers.conf
	else
		# Remove X-Service-UID header if an empty value.
		sed -i \
			-e 's~^\([ \t]*\)\(Header set X-Service-UID .*\)$~\1#\2~g' \
			/etc/httpd/conf.d/00-headers.conf
	fi
}

function __set_apache_mpm ()
{
	local apache_mpm="${1:-${APACHE_MPM}}"

	case "${apache_mpm,,}" in
		event)
			if [[ -f /etc/httpd/conf.modules.d/00-mpm.conf ]]
			then
				sed -r -i \
					-e 's~^(LoadModule.*)$~#\1~g' \
					-e 's~^#(LoadModule mpm_event_module.*)$~\1~' \
					/etc/httpd/conf.modules.d/00-mpm.conf
			elif [[ -f /usr/sbin/httpd.event ]]
			then
				sed -r -i \
					-e 's~^#?(HTTPD=/usr/sbin/httpd).*$~\1.event~' \
					/etc/sysconfig/httpd
			else
				>&2 printf -- \
					'ERROR: Invalid Apache Server MPM: %s\n' \
					"${apache_mpm}"
				exit 1
			fi
			;;
		worker)
			if [[ -f /etc/httpd/conf.modules.d/00-mpm.conf ]]
			then
				sed -r -i \
					-e 's~^(LoadModule.*)$~#\1~g' \
					-e 's~^#(LoadModule mpm_worker_module.*)$~\1~' \
					/etc/httpd/conf.modules.d/00-mpm.conf
			elif [[ -f /usr/sbin/httpd.worker ]]
			then
				sed -r -i \
					-e 's~^#?(HTTPD=/usr/sbin/httpd).*$~\1.worker~' \
					/etc/sysconfig/httpd
			else
				>&2 printf -- \
					'ERROR: Invalid Apache Server MPM: %s\n' \
					"${apache_mpm}"
				exit 1
			fi
			;;
		prefork)
			if [[ -f /etc/httpd/conf.modules.d/00-mpm.conf ]]
			then
				sed -r -i \
					-e 's~^(LoadModule.*)$~#\1~g' \
					-e 's~^#(LoadModule mpm_prefork_module.*)$~\1~' \
					/etc/httpd/conf.modules.d/00-mpm.conf
			elif [[ -f /usr/sbin/httpd ]]
			then
				sed -r -i \
					-e 's~^(HTTPD=/usr/sbin/httpd.*)$~#\1~g' \
					/etc/sysconfig/httpd
			else
				>&2 printf -- \
					'ERROR: Invalid Apache Server MPM: %s\n' \
					"${apache_mpm}"
				exit 1
			fi
			;;
		*)
			>&2 printf -- \
				'ERROR: Invalid Apache Server MPM: %s\n' \
				"${apache_mpm}"
			exit 1
			;;
	esac
}

function __set_apache_server_name ()
{
	local -r host="${1:-${APACHE_SERVER_NAME:-"$(
		hostname
	)"}}"
	local -r port="${2:-80}"

	sed -i \
		-e "s~^#ServerName \(.*\):80$~ServerName ${host}:${port}~g" \
		/etc/httpd/conf/httpd.conf
}

function __set_apache_ssl_certificate ()
{
	local -r certificate_path="/etc/pki/tls/certs/localhost.crt"
	local -r base64_pattern='^[A-Za-z0-9/+=]*$'
	local -r plain_text_pattern='^-----BEGIN '

	local certificate="${1}"

	if [[ -n ${certificate} ]]
	then
		# Decode base64 encoded values
		if [[ ${certificate} =~ ${base64_pattern} ]]
		then
			certificate="$(
				base64 -d -i <<< "${certificate}"
			)"
		fi

		if [[ -s ${certificate} ]] \
			&& [[ ${certificate} != ${certificate_path} ]]
		then
			ln -sf \
				"${certificate}" \
				"${certificate_path}"
		else
			if [[ ! ${certificate} =~ ${plain_text_pattern} ]]
			then
				>&2 printf -- \
					'ERROR: Invalid APACHE_SSL_CERTIFICATE\n'
				sleep 0.1
				exit 1
			fi

			printf -- \
				'%s' \
				"${certificate}" \
				> "${certificate_path}"
		fi

		if ! __is_valid_apache_ssl_certificate \
			"${certificate_path}"
		then
			>&2 printf -- \
				'ERROR: Invalid APACHE_SSL_CERTIFICATE\n'
			sleep 0.1
			exit 1
		fi
	fi
}

function __set_php_fpm_pool ()
{
	local -r user="${1:-app}"
	local -r group="${2:-app-www}"

	if [[ -f /etc/php-fpm.d/www.conf.template ]]
	then
		rm -f /etc/php-fpm.d/*.conf

		sed \
			-e "s~{{APACHE_RUN_GROUP}}~${group}~g" \
			-e "s~{{APACHE_RUN_USER}}~${user}~g" \
			/etc/php-fpm.d/www.conf.template \
			> "/etc/php-fpm.d/${user}.conf"

		sed -i \
			-e "s~php-fpm/\(.*\)\.sock~php-fpm/${user}\.sock~" \
			/etc/httpd/conf.d/php-fpm.conf
	fi

}

function __update_group_name ()
{
	local -r group="${1}"
	local -r group_new="${2}"

	if [[ ${group_new} != "${group}" ]] \
		&& [[ ${group_new} != root ]] \
		&& [[ ${group} != root ]] \
		&& [[ -n $(getent group "${group}") ]]
	then
		groupmod -n "${group_new}" "${group}"
	fi
}

function __update_user_login ()
{
	local -r user="${1}"
	local -r user_new="${2}"

	if [[ ${user_new} != "${user}" ]] \
		&& __is_valid_user_login "${user_new}" \
		&& __is_valid_user_login "${user}" \
		&& [[ -z $(getent passwd "${user_new}") ]] \
		&& [[ -n $(getent passwd "${user}") ]]
	then
		usermod -l "${user_new}" "${user}"
	fi
}

# Ensure HOSTNAME global is set
if [[ -z ${HOSTNAME} ]]
then
	export HOSTNAME="$(
		hostname
	)"
fi

DEFAULT_SYSTEM_USER="app"
DEFAULT_APACHE_USER="app-www"
PACKAGE_PATH="${PACKAGE_PATH:-/opt/app}"

OPTS_APACHE_CONTENT_ROOT="$(
	__get_apache_content_root
)"
OPTS_APACHE_DOCUMENT_ROOT="${OPTS_APACHE_CONTENT_ROOT}/$(
	__get_apache_public_directory
)"
OPTS_APACHE_EXTENDED_STATUS_ENABLED="${APACHE_EXTENDED_STATUS_ENABLED:-false}"
OPTS_APACHE_HEADER_X_SERVICE_UID="$(
	__get_apache_header_x_service_uid
)"
OPTS_APACHE_MOD_SSL_ENABLED="${APACHE_MOD_SSL_ENABLED:-false}"
OPTS_APACHE_MPM="${APACHE_MPM:-prefork}"
OPTS_APACHE_RUN_GROUP="${APACHE_RUN_GROUP:-${DEFAULT_APACHE_USER}}"
OPTS_APACHE_RUN_USER="${APACHE_RUN_USER:-${DEFAULT_APACHE_USER}}"
OPTS_APACHE_SERVER_ALIAS="${APACHE_SERVER_ALIAS:-}"
OPTS_APACHE_SERVER_NAME="${APACHE_SERVER_NAME:-"$(
	hostname
)"}"
OPTS_APACHE_SSL_CERTIFICATE="${APACHE_SSL_CERTIFICATE:-}"
OPTS_APACHE_SYSTEM_USER="${APACHE_SYSTEM_USER:-${DEFAULT_SYSTEM_USER}}"

__set_php_fpm_pool "${OPTS_APACHE_RUN_USER}" "${OPTS_APACHE_RUN_GROUP}"

# Load app package Apache configuration files.
__load_httpd_conf_scan_files "${PACKAGE_PATH}"

# Load app package PHP configuration files.
__load_php_ini_scan_files "${PACKAGE_PATH}"

# Populate SSL certificate file.
if [[ ${OPTS_APACHE_MOD_SSL_ENABLED} == true ]] \
	&& [[ -n ${OPTS_APACHE_SSL_CERTIFICATE} ]]
then
	__set_apache_ssl_certificate \
		"${OPTS_APACHE_SSL_CERTIFICATE}"
elif [[ ${OPTS_APACHE_MOD_SSL_ENABLED} == true ]] \
	&& [[ -z ${OPTS_APACHE_SSL_CERTIFICATE} ]]
then
	__make_self_signed_san_certificate \
		"${OPTS_APACHE_SERVER_NAME}" \
		"${OPTS_APACHE_SERVER_ALIAS}" \
		&> /dev/null \
		&

	PIDS[2]="${!}"
fi

# Set the system user passwords
printf -- \
	'%s:%s\n' \
	"${DEFAULT_SYSTEM_USER}" \
	"$(
		__get_password
	)" \
	| chpasswd \
	&
PIDS[0]="${!}"

printf -- \
	'%s:%s\n' \
	"${DEFAULT_APACHE_USER}" \
	"$(
		__get_password
	)" \
	| chpasswd \
	&
PIDS[1]="${!}"

# Verify package installation directory exists
if [[ ! -d ${PACKAGE_PATH} ]]
then
	>&2 printf -- \
		'ERROR: %s not found.\n' \
		"${PACKAGE_PATH}"
	exit 1
fi

# Initialise Apache server root directory.
APACHE_SERVER_HOME="$(
	dirname \
		"${OPTS_APACHE_CONTENT_ROOT}"
)"

if [[ ! -d ${APACHE_SERVER_HOME} ]]
then
	printf -- \
		'Create home directory %s.\n' \
		"${APACHE_SERVER_HOME}"
	mkdir \
		-p \
		-m 755 \
		"${APACHE_SERVER_HOME}"
fi

if [[ ! -d ${OPTS_APACHE_CONTENT_ROOT} ]]
then
	printf -- \
		'Linking install directory %s > %s.\n' \
		"${PACKAGE_PATH}" \
		"${OPTS_APACHE_CONTENT_ROOT}"
	ln -s \
		"${PACKAGE_PATH}" \
		"${OPTS_APACHE_CONTENT_ROOT}"
elif [[ -d ${OPTS_APACHE_CONTENT_ROOT} ]] \
	&& [[ ! -h ${OPTS_APACHE_CONTENT_ROOT} ]] \
	&& [[ -z "$(find "${OPTS_APACHE_CONTENT_ROOT}" -maxdepth 1 -type f)" ]]
then
	printf -- \
		'Populating install directory  %s > %s.\n' \
		"${PACKAGE_PATH}" \
		"${OPTS_APACHE_CONTENT_ROOT}"
	cp -rpf \
		"${PACKAGE_PATH}"/. \
		"${OPTS_APACHE_CONTENT_ROOT}"
fi

# Verify Apache DocumentRoot directory exists
if [[ ! -d ${OPTS_APACHE_DOCUMENT_ROOT} ]]
then
	>&2 printf -- \
		'ERROR: %s not found.\n' \
		"${OPTS_APACHE_DOCUMENT_ROOT}"
	exit 1
fi

APACHE_DOCUMENT_ROOT_FILE_SYSTEM="$(
	df -PT "${OPTS_APACHE_DOCUMENT_ROOT}" \
		| awk 'NR>1 { print $2 }'
)"

# Server MPM
__set_apache_mpm "${OPTS_APACHE_MPM}"

# Add local hosts entries
__add_hosts_entry \
	127.0.0.1 \
	"$(
		printf -- \
			'%s%s%s' \
			"${OPTS_APACHE_SERVER_NAME}" \
			"${OPTS_APACHE_SERVER_ALIAS:+ }" \
			"${OPTS_APACHE_SERVER_ALIAS}"
	)"

# Set Apache EnableSendfile
if [[ ${APACHE_DOCUMENT_ROOT_FILE_SYSTEM} == nfs ]]
then
	printf -- \
		'Disabling EnableSendfile.'
	__set_apache_enable_sendfile false
else
	__set_apache_enable_sendfile true
fi

# Set Apache ExtendedStatus
if [[ ${OPTS_APACHE_EXTENDED_STATUS_ENABLED} == true ]]
then
	printf -- \
		'Enabling EnableSendfile.'
fi
__set_apache_extended_status "${OPTS_APACHE_EXTENDED_STATUS_ENABLED}"

# Set Apache X-Service-UID Header
__set_apache_header_x_service_uid "${OPTS_APACHE_HEADER_X_SERVICE_UID}"

# Set Apache ServerName
__set_apache_server_name "${OPTS_APACHE_SERVER_NAME}" "80"

# Enable Apache modules
APACHE_MODULES_ENABLED="$(
	__enable_apache_modules \
		"${APACHE_LOAD_MODULES}"
)"

# Enable/Disable SSL support
if [[ ${OPTS_APACHE_MOD_SSL_ENABLED} == true ]]
then
	printf -- \
		'Enabling SSL support.'
	cat \
		/etc/httpd/conf.d/ssl.conf.off \
		> /etc/httpd/conf.d/ssl.conf

	if [[ -f /etc/httpd/conf.d/10-ssl-vhost.conf.off ]]
	then
		cat \
			/etc/httpd/conf.d/10-ssl-vhost.conf.off \
			> /etc/httpd/conf.d/10-ssl-vhost.conf
	fi

	if [[ -f /etc/httpd/conf.modules.d/00-ssl.conf ]]
	then
		sed -i \
			-e 's~^#\(LoadModule ssl_module .*\)$~\1~' \
			/etc/httpd/conf.modules.d/00-ssl.conf
	fi
else
	:> /etc/httpd/conf.d/ssl.conf

	if [[ -f /etc/httpd/conf.d/10-ssl-vhost.conf ]]
	then
		:> /etc/httpd/conf.d/10-ssl-vhost.conf
	fi

	if [[ -f /etc/httpd/conf.modules.d/00-ssl.conf ]]
	then
		sed -i \
			-e 's~^\(LoadModule ssl_module .*\)$~#\1~' \
			/etc/httpd/conf.modules.d/00-ssl.conf
	fi
fi

# Set ownership for fcgid php-wrapper and socket if necessary
if [[ -d ${PACKAGE_PATH}/bin ]] \
	&& [[ -d /var/run/mod_fcgid ]]
then
	chown -R \
		"${OPTS_APACHE_RUN_USER}":"${OPTS_APACHE_RUN_GROUP}" \
		{"${PACKAGE_PATH}"/bin,/var/run/mod_fcgid}
fi

# Set the system user's login names and groups
__update_user_login "${DEFAULT_SYSTEM_USER}" "${OPTS_APACHE_SYSTEM_USER}"
__update_group_name "${DEFAULT_SYSTEM_USER}" "${OPTS_APACHE_SYSTEM_USER}"
__update_user_login "${DEFAULT_APACHE_USER}" "${OPTS_APACHE_RUN_USER}"
__update_group_name "${DEFAULT_APACHE_USER}" "${OPTS_APACHE_RUN_GROUP}"

# Wait for background processes
wait ${PIDS[0]}
wait ${PIDS[1]}

SSL_CRT_FINGERPRINT_DETAILS=
if [[ ${OPTS_APACHE_MOD_SSL_ENABLED} == true ]]
then
	# Wait for certificate generation if necessary
	if [[ -n ${PIDS[2]} ]]
	then
		wait ${PIDS[2]}
	fi

	DIGEST="sha1"

	printf -v \
		SSL_CRT_FINGERPRINT_DETAILS \
		-- '\nssl certificate %s fingerprint : \n%s' \
		"${DIGEST}" \
		"$(
			__get_ssl_certificate_fingerprint \
				"${DIGEST}"
		)"
fi

TIMER_TOTAL="$(
	awk \
		-v timer_end="$(
			date +%s.%N
		)" \
		-v timer_start="${TIMER_START}" \
		'BEGIN { print \
			timer_end - timer_start;
		}'
)"

cat <<-EOT

	================================================================================
	Apache Details
	--------------------------------------------------------------------------------
	system user : ${OPTS_APACHE_SYSTEM_USER}
	run user : ${OPTS_APACHE_RUN_USER}
	run group : ${OPTS_APACHE_RUN_GROUP}
	server name : ${OPTS_APACHE_SERVER_NAME}
	server alias : ${OPTS_APACHE_SERVER_ALIAS}
	header x-service-uid : ${OPTS_APACHE_HEADER_X_SERVICE_UID:-unset}
	document root : ${OPTS_APACHE_DOCUMENT_ROOT} (${APACHE_DOCUMENT_ROOT_FILE_SYSTEM})
	server mpm : ${OPTS_APACHE_MPM,,}
	modules enabled :
	${APACHE_MODULES_ENABLED}${SSL_CRT_FINGERPRINT_DETAILS}
	--------------------------------------------------------------------------------
	${TIMER_TOTAL}

EOT

# Release lock file
rm -f /var/lock/subsys/httpd-bootstrap
