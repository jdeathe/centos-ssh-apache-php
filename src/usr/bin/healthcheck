#!/usr/bin/env bash

function __is_throttled_interval ()
{
	local -i interval="${1:-10}"
	local pattern_seconds_in_minute='^([1-9]|[1-5][0-9]|60)$'

	# interval must be between 1 and 60 seconds
	if [[ ! ${interval} =~ ${pattern_seconds_in_minute} ]]
	then
		interval=10
	fi

	if (( $(date +%-S)%${interval} == 0 ))
	then
		return 0
	else
		return 1
	fi
}

function __last_check_passed ()
{
	local -i status=0

	if [[ ! -f ${STATUS_PATH} ]]
	then
		return ${status}
	else
		read \
			-n 1 \
			status \
		< "${STATUS_PATH}"

		if [[ ${status} =~ ^[01]$ ]]
		then
			return ${status}
		else
			return 1
		fi
	fi
}

function __print_message ()
{
	local -r type="${1:-}"
	local -r quiet="${QUIET:-false}"
	local message="${2:-}"
	local prefix=""

	case "${type}" in
		error)
			prefix="[ERROR] "
			;;
		info)
			prefix="[INFO] "
			;;
		*)
			message="${type}"
			;;
	esac

	if [[ ${quiet} == true ]] \
		&& [[ ${type} != error ]]
	then
		return 0
	elif [[ ${quiet} == true ]] \
		&& [[ ${type} == error ]]
	then
		>&2 printf -- \
			'%s%s\n' \
			"${prefix}" \
			"${message}"
	else
		printf -- \
			'%s%s\n' \
			"${prefix}" \
			"${message}"
	fi
}

function __record_exit_status ()
{
	local -i status=${1:-${?}}
	local status_directory="$(
		dirname "${STATUS_PATH}"
	)"

	if [[ ! -d ${status_directory} ]]
	then
		install \
			-d \
			-m 0660 \
			-o root \
			-g root \
			"${status_directory}"
	fi

	if [[ ! -f ${STATUS_PATH} ]]
	then
		install \
			-m 0660 \
			-o root \
			-g root \
			/dev/null \
			"${STATUS_PATH}"
	fi

	printf -- \
		'%d' \
		"${status}" \
	> "${STATUS_PATH}"

	trap - \
		EXIT

	exit ${status}
}

function __usage ()
{
	cat <<-USAGE
	
	Usage: $(basename ${0}) [OPTIONS]
	       $(basename ${0}) [-h|--help]
	
	Options:
	  -H, --host=<hostname>               Hostname used in the Host request 
	                                      header.
	                                      Default: localhost.localdomain
	  -i, --interval=<seconds>            After the first successful check the 
	                                      CURL request interval can be throttled 
	                                      to repeat at an interval of seconds 
	                                      between 1-60. An interval of 1 results 
	                                      in a check request occurring every 
	                                      second whereas an interval of 60 limits 
	                                      check requests to once per minute.
	                                      Default: 10
	  -m, --max-time=<seconds>            Maximum time allowed for the CURL check 
	                                      to complete.
	                                      Default: 0.5
	  -u, --url=<url>                     The local IPv4 URL endpoint to check 
	                                      inclusive of protocol.
	                                      Default: http://127.0.0.1/
	  -q, --quiet                         Do not print message output.
	
	USAGE

	exit 1
}

function main ()
{
	local -r STATUS_PATH="/var/lib/healthcheck/status"
	local QUITE="false"

	local host="localhost.localdomain"
	local -i interval=10
	local max_time=0.5
	local pattern_host='^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])(\.([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9]))*$'
	local pattern_local_url='^https?://(127\.0\.0\.1|localhost)/'
	local pattern_max_time='^(0\.[1-9]|[1-9][0-9]*)$'
	local pattern_seconds_in_minute='^([1-9]|[1-5][0-9]|60)$'
	local url="http://127.0.0.1/"

	# Trap and record the exit status
	trap "__record_exit_status \${?}" \
		EXIT

	while [[ "${#}" -gt 0 ]]
	do
		case "${1}" in
			-h|--help)
				__usage
				break
				;;
			-H)
				host="${2}"
				shift 2 || break
				;;
			--host=*)
				host="${1#*=}"
				shift 1
				;;
			-i)
				interval="${2}"
				shift 2 || break
				;;
			--interval=*)
				interval="${1#*=}"
				shift 1
				;;
			-m)
				max_time="${2}"
				shift 2 || break
				;;
			--max-time=*)
				max_time="${1#*=}"
				shift 1
				;;
			-u)
				url="${2}"
				shift 2 || break
				;;
			--url=*)
				url="${1#*=}"
				shift 1
				;;
			-q|--quiet)
				QUIET=true
				shift 1
				;;
			*)
				__usage
				;;
		esac
	done

	if [[ ! ${host} =~ ${pattern_host} ]]
	then
		__print_message \
			"error" \
			"Invalid host."
		exit 1
	fi

	if [[ ! ${interval} =~ ${pattern_seconds_in_minute} ]]
	then
		__print_message \
			"error" \
			"Invalid interval."
		exit 1
	fi

	if [[ ! ${max_time} =~ ${pattern_max_time} ]]
	then
		__print_message \
			"error" \
			"Invalid max_time."
		exit 1
	fi

	if [[ ! ${url} =~ ${pattern_local_url} ]]
	then
		__print_message \
			"error" \
			"Invalid url."
		exit 1
	fi

	if ! ps axo command \
		| grep -qE '^/usr/bin/python /usr/bin/supervisord'
	then
		__print_message \
			"error" \
			"supervisord not running."
		exit 1
	fi

	if [[ ${APACHE_AUTOSTART_HTTPD_BOOTSTRAP} == false ]] \
		&& [[ ${APACHE_AUTOSTART_HTTPD_WRAPPER} == false ]] \
		&& [[ ${APACHE_AUTOSTART_PHP_FPM_WRAPPER} == false ]]
	then
		exit 0
	fi

	# httpd-bootstrap
	if [[ ${APACHE_AUTOSTART_HTTPD_BOOTSTRAP} == true ]] \
		&& [[ -e /var/lock/subsys/httpd-bootstrap ]]
	then
		__print_message \
			"error" \
			"Bootstrap failed to complete."
		exit 1
	fi

	# httpd-wrapper
	if [[ ${APACHE_AUTOSTART_HTTPD_WRAPPER} == true ]] \
		&& ! ps axo command \
		| grep -qE '^/usr/sbin/httpd(\.worker|\.event)? '
	then
		__print_message \
			"error" \
			"httpd not running."
		exit 1
	fi

	# php-fpm-wrapper
	if [[ ${APACHE_AUTOSTART_PHP_FPM_WRAPPER} == true ]] \
		&& ! ps axo command \
		| grep -q "^php-fpm: pool ${APACHE_RUN_USER}[ ]*$"
	then
		__print_message \
			"error" \
			"php-fpm not running."
		exit 1
	fi

	# Throttle CURL checks if last check passed.
	if [[ ${APACHE_AUTOSTART_HTTPD_WRAPPER} == false ]] \
		|| __last_check_passed \
		&& ! __is_throttled_interval \
			"${interval}"
	then
		exit 0
	fi

	http_code="$(
		curl \
			-f \
			-k \
			-s \
			-I \
			-m ${max_time} \
			--no-keepalive \
			-w %{http_code} \
			-o /dev/null \
			-A Docker-Healthcheck \
			-H "Connection: close" \
			-H "Host: ${host}" \
			"${url}"
	)"

	# Fail on server errors only.
	if [[ ${http_code} == 000 ]] \
		|| [[ ${http_code} -ge 500 ]]
	then
		__print_message \
			"$(
				printf -- \
					'%s Host:%s %s' \
					"${http_code}" \
					"${host}" \
					"${url}"
			)"
		exit 1
	fi

	exit 0
}

main "${@}"
